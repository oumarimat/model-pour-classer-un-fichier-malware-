from flask import Flask, request, jsonify, render_template
import joblib
import pandas as pd
import pefile
import os
import tempfile

app = Flask(__name__)

# Charger le modèle pré-entraîné
model = joblib.load('model_decision_ttree.pkl')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return jsonify({'error': 'Aucun fichier téléchargé'}), 400

    file = request.files['file']

    if not file.filename.endswith('.exe'):
        return jsonify({'error': 'Veuillez télécharger un fichier exécutable (.exe)'}), 400

    # Sauvegarder le fichier temporairement
    temp_file_path = save_temp_file(file)

    # Extraire les caractéristiques du fichier
    features = extract_features_from_file(temp_file_path)

    # Convertir les caractéristiques en DataFrame pour la prédiction
    features_df = pd.DataFrame([features])

    # Prédire avec le modèle
    prediction = model.predict(features_df)

    # Retourner la prédiction
    if prediction[0] == 0:
        return jsonify({'prediction': 'Légitime'})
    else:
        return jsonify({'prediction': 'Malware'})


def save_temp_file(file):
    """Sauvegarder le fichier téléchargé dans un fichier temporaire."""
    temp_dir = tempfile.mkdtemp()  # Crée un répertoire temporaire
    temp_file_path = os.path.join(temp_dir, file.filename)
    
    # Enregistrer le fichier téléchargé dans ce répertoire temporaire
    file.save(temp_file_path)
    
    return temp_file_path


def extract_features_from_file(file_path):
    """Extraire les caractéristiques d'un fichier exécutable en utilisant pefile."""
    pe = pefile.PE(file_path)

    # Extraire des caractéristiques simples comme le nombre de sections, etc.
    num_sections = len(pe.sections)
    entry_point = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    file_size = pe.FILE_HEADER.SizeOfOptionalHeader
    size_of_image = pe.OPTIONAL_HEADER.SizeOfImage

    return [num_sections, entry_point, file_size, size_of_image]

if __name__ == '__main__':
    app.run(debug=True)
